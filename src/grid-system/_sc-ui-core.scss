// placeholder para ed-container
%sc-ui-container {
  display      : flex;
  flex-wrap    : wrap;
  max-width    : $max-width;
  margin-left  : auto;
  margin-right : auto;
  width        : 100%;
}

// placeholder para sc-ui-item
%sc-ui-item {
  margin        : 0;
  padding-left  : $gutter;
  padding-right : $gutter;
}

/// @example scss
/// .container {
///   @include scUIContainer;
///}
@mixin scUIContainer {
  @extend %sc-ui-container;

  @if $devMode == true {
    @include devModeContainer();
  }
}

/// @example scss
/// .full {
///   @include full;
/// }
@mixin full {
  max-width : 100%;
}

@mixin scUIItemWidth($currentBp, $prevBp, $coreBp){
  // Si el tamaño actual es diferente al previo
  // asignará el ancho en porcentaje
  @if $currentBp != $prevBp{
    @if $currentBp < 1 {
      @include from($coreBp){
        width : $currentBp * 100%;
      }
    }
    @else {
      @include from($coreBp){
        width : $currentBp * 1%;
      }
    }
  }
}


/// mixin para crear un sc-ui-item
/// Description
/// Los argumentos que acepta son las diferentes medidas que tendra el elemento en diferentes resoluciones de pantalla.
/// Las medidas pueden especificarse como porcentajes ( %  ) o como fracciones (1/3, 3/3 o 3/6, 2/6).
/// @group layouts
/// @param   {number} $s - para resoluciones entre 0px y 640px
/// @param   {number} $m - para resoluciones entre 640px y 1024px
/// @param   {number} $l - para resoluciones entre 1024px y 1440px
/// @param   {number} $xl - para resoluciones desde 1440px en adelante.
/// @example scss
///   .container {
///     @include scUIContainer;
///   }
///
///   .content {
///     @include scUIItem(100, 75, 60);
///   }
///   .sidebar {
///     @include scUIItem(100, 25, 40);
///   }
@mixin scUIItem($s:100,$m:$s,$l:$m,$xl:$l) {
  @extend %sc-ui-item;

  @if $devMode == true {
    @include devModeItem();
  }

  // calcular el ancho para el primer breakpoint
  // por defecto es 100% y se convertirá al porcentaje adecuado
  // según el valor que se le pase
  @if $s == 100 {
    width: 100%;
  } @else if $s < 1 {
    width : $s * 100%;
  } @else {
    width : $s * 1%;
  }

  // widths for others breakpoints
  // anchos para los demás breakpoints
  @include scUIItemWidth($m,$s,m); //medium
  @include scUIItemWidth($l,$m,l); //large
  @include scUIItemWidth($xl,$l,xl); //xlarge
}

// crear un sc-ui-container
.#{$container} { @include scUIContainer() }

// crear un sc-ui-item
.#{$item} {
  @include scUIItem();

  // un sc-ui-item a la vez puede ser sc-ui-container
  // para evitar anidaciones innecesarias
  &.#{$container}{
    padding-left : 0;
    padding-right : 0;
  }
}

// Breakpoints
@mixin coreGrid(){
  @each $size, $screen-size in $breakpoints{
    @if $size == s {
      @for $i from 1 through 20 {
        .s-#{$i*5},
        .#{$item}.s-#{$i*5} {
          width: $i * 5%;
        }
      }
      @each $fraction in $fractions{
        @for $i from 1 through $fraction{
          .s-#{$i}-#{$fraction},
          .#{$item}.s-#{$i}-#{$fraction} {
            width: (100% / $fraction) * $i;
          }
        }
      }
    } @else {
      @media all and (min-width: $screen-size){
        @for $i from 1 through 20 {
          .#{$size}-#{$i*5},
          .#{$item}.#{$size}-#{$i*5}{
            width: $i * 5%;
          }
        }
        @each $fraction in $fractions {
          @for $i from 1 through $fraction{
            .#{$size}-#{$i}-#{$fraction},
            .#{$item}.#{$size}-#{$i}-#{$fraction} {
              width: (100% / $fraction) * $i
            }
          }
        }
      }
    }
  }
}
